## VECTOR 2D/3D MATRIX 2D/3D/4D LIBRARY TODOs

Implement MATRIX 4D:
    ☐ Matrix4.pm
    Details:
        ☐ constructor
        ☐ set
        ☐ print
        ☐ copy
        ☐ clone
        ☐ zero
        ☐ random
        ☐ equals
        ☐ negate
        ...

Implement MATRIX 3D:
    ☐ Matrix3.pm
    Details:
        ☐ constructor
        ☐ set
        ☐ print
        ☐ copy
        ☐ clone
        ☐ zero
        ☐ random
        ☐ equals
        ☐ negate
        ...

Implement MATRIX 2D:
    ☐ Matrix2.pm
    Details:
        ☐ constructor
        ☐ set
        ☐ print
        ☐ copy
        ☐ clone
        ☐ zero
        ☐ random
        ☐ equals
        ☐ negate
        ...

Implement VECTOR 4D:
    ☐ Vector4.pm
    Details:
        ☐ constructor
        ☐ set
        ☐ get
        ☐ X setter/getter
        ☐ Y setter/getter
        ☐ Z setter/getter
        ☐ W setter/getter
        ☐ print
        ☐ zero
        ☐ random
        ☐ equals
        ☐ negate
        ☐ setScalar
        ☐ setComponent
        ☐ getComponent
        ☐ clone
        ☐ copy
        ☐ add
        ☐ addScalar
        ☐ addVectors
        ☐ addScaledVector
        ☐ sub
        ☐ subScalar
        ☐ subVectors
        ☐ multiply
        ☐ multiplyScalar
        ☐ applyMatrix4
        ☐ divideScalar
        ☐ setAxisAngleFromQuaternion
        ☐ setAxisAngleFromRotationMatrix
        ☐ min
        ☐ max
        ☐ clamp
        ☐ clampScalar
        ☐ clampLength
        ☐ floor
        ☐ ceil
        ☐ round
        ☐ roundToZero
        ☐ negate
        ☐ dot
        ☐ lengthSq
        ☐ length
        ☐ manhattanLength
        ☐ normalize
        ☐ setLength
        ☐ lerp
        ☐ lerpVectors
        ☐ equals
        ☐ fromArray
        ☐ toArray
        ☐ fromBufferAttribute
        ☐ random

Implement VECTOR 3D:
    ☐ Vector3.pm
    Details:
        ☐ constructor
        ☐ set
        ☐ get
        ☐ X get/set
        ☐ Y get/set
        ☐ Z get/set
        ☐ setScalar
        ☐ setComponent
        ☐ getComponent
        ☐ clone
        ☐ copy
        ☐ add
        ☐ addScalar
        ☐ addVectors
        ☐ addScaledVector
        ☐ sub
        ☐ subScalar
        ☐ subVectors
        ☐ multiply
        ☐ multiplyScalar
        ☐ multiplyVectors
        ☐ applyEuler
        ☐ applyAxisAngle
        ☐ applyMatrix3
        ☐ applyNormalMatrix
        ☐ applyMatrix4
        ☐ applyQuaternion
        ☐ project
        ☐ unproject
        ☐ transformDirection
        ☐ divide
        ☐ divideScalar
        ☐ min
        ☐ max
        ☐ clamp
        ☐ clampScalar
        ☐ clampLength
        ☐ floor
        ☐ ceil
        ☐ round
        ☐ roundToZero
        ☐ negate
        ☐ dot
        ☐ lengthSq
        ☐ length
        ☐ manhattanLength
        ☐ normalize
        ☐ setLength
        ☐ lerp
        ☐ lerpVectors
        ☐ cross
        ☐ crossVectors
        ☐ projectOnVector
        ☐ projectOnPlane
        ☐ reflect
        ☐ angleTo
        ☐ distanceTo
        ☐ distanceToSquared
        ☐ manhattanDistanceTo
        ☐ setFromSpherical
        ☐ setFromSphericalCoords
        ☐ setFromCylindrical
        ☐ setFromCylindricalCoords
        ☐ setFromMatrixPosition
        ☐ setFromMatrixScale
        ☐ setFromMatrixColumn
        ☐ setFromMatrix3Column
        ☐ setFromEuler
        ☐ setFromColor
        ☐ equals
        ☐ fromArray
        ☐ toArray
        ☐ fromBufferAttribute
        ☐ random
        ☐ randomDirection

Implement QUATERNION:
    ☐ Quaternion.pm
    Details:
        ✔ constructor @done(24-03-27 13:36)
        ✔ destructor @done(24-03-27 13:38)
        ✔ set @done(24-03-28 11:03)
        ✔ get @done(24-03-27 13:36)
        ✔ ID get quertnion instance id @done(24-03-27 13:38)
        ✔ print @done(24-03-27 13:37)
        ✔ X get/set @done(24-03-27 13:37)
        ✔ Y get/set @done(24-03-27 13:37)
        ✔ Z get/set @done(24-03-27 13:37)
        ✔ W get/set @done(24-03-27 13:37)
        ✔ clone @done(24-03-27 13:39)
        ✔ copy @done(24-03-27 13:39)
        ☐ setFromEuler @started(24-03-28 09:24)
        ☐ setFromAxisAngle
        ☐ setFromRotationMatrix
        ☐ setFromUnitVectors
        ☐ angleTo
        ☐ rotateTowards
        ☐ identity
        ☐ invert
        ☐ conjugate
        ☐ dot
        ☐ lengthSq
        ☐ length
        ☐ normalize
        ☐ multiply
        ☐ premultiply
        ☐ multiplyQuaternions
        ☐ slerp
        ☐ slerpQuaternions
        ☐ random()
        ✔ equals @done(24-03-28 11:04)
            overloaded '==':
            ✔ @done(24-03-28 11:04)
        ☐ fromArray
        ☐ toArray
        ☐ fromBufferAttribute
        ☐ toJSON

Implement MathUtils:
    ☐ MathUtils.pm @started(24-03-27 11:30)
    Details:
        ✔ smoothstep @done(24-03-27 11:31)
        ✔ euclideanModulo @done(24-03-27 11:31)
        ✔ pingpong @done(24-03-27 11:31)
        ✔ generateUUID @done(24-03-27 11:31)
        ✔ euclideanModulo @done(24-03-27 11:31)
        ✔ damp @done(24-03-27 11:31)
        ✔ mapLinear @done(24-03-27 11:31)
        ✔ inverseLerp @done(24-03-27 11:31)
        ✔ lerp @done(24-03-27 11:31)
        ✔ nearest_square @done(24-03-27 11:31)
        ✔ nearest_square_root @done(24-03-27 11:31)
        ✔ normalize_angle_degrees @done(24-03-27 11:31)
        ✔ normalize_angle_radians @done(24-03-27 11:31)
        ✔ clamp @done(24-03-27 11:31)
        ✔ smootherstep @done(24-03-27 11:31)
        ✔ randInt @done(24-03-27 11:31)
        ✔ randFloat @done(24-03-27 11:31)
        ✔ randFloatSpread @done(24-03-27 11:31)
        ✔ ceilPowerOfTwod @done(24-03-27 11:31)
        ✔ floorPowerOfTwo @done(24-03-27 11:31)
        ✔ isPowerOfTwo @done(24-03-27 11:31)
        ☐ setQuaternionFromProperEuler
        ✔ isWithin @done(24-03-27 11:31)
        ✔ roundNearest @done(24-03-27 11:31)

Implement VECTOR 2D:
    ☐ Vector2.pm @started(24-03-21 09:00)
    Details:
        ✔ constructor @done(24-03-21 18:32)
        ✔ set @done(24-03-21 20:26)
        ✔ print @done(24-03-21 19:37)
        ✔ clone @done(24-03-21 21:22)
        ✔ zero @done(24-03-21 20:54)
        ✔ copy @done(24-03-21 21:30)
        ✔ add @done(24-03-21 13:10)
        ✔ subtract @done(24-03-21 18:35)
            add overloaded '+-':
            ✔ + add two vectors with overloaded '+' operator @done(24-03-21 18:33)
            ✔ - subtract two vectors with overloaded '-' operator @done(24-03-21 18:35)
        ✔ sadd add a scalar value to the vector @done(24-03-26 08:23)
        ✔ ssub subtract a scalar from vector @done(24-03-26 08:23)
            overloaded '+-':
            ✘ + scalar add to vector with overloaded '+' operator @cancelled(24-03-26 08:23)
            ✘ - subtract scalar from vector with overloaded '-' operator @cancelled(24-03-26 08:23)
        ✔ mul multiple two vectors - quite the same as dot product except no sum at the end @done(24-03-21 22:28)
            overload '*':
            ✔ overload '*' operator @done(24-03-21 22:31)
        ✔ smul multiple vector with scalar @done(24-03-22 21:19)
            overload '*':
            ✔ overload '*' operator for smul @done(24-03-22 21:19)
        ✔ div divide two vectors - see more at 'mul' method @done(24-03-22 22:36)
            overloaded '/':
            ✔ overload '/' operator for div @done(24-03-22 22:36)
        ✔ sdiv @done(24-03-22 22:36)
            overloaded '/':
            ✔ overload '/' operator for sdiv @done(24-03-22 22:36)
        ☐ applyMatrix3 !!!TODO: after Matrix3 designed and developed !!!
        ✔ vmin @started(24-03-26 08:24) @done(24-03-26 10:10) @lasted(1h46m24s)
        ✔ vmax @started(24-03-26 08:24) @done(24-03-26 10:10) @lasted(1h46m25s)
        ✔ vclamp @done(24-03-26 11:00)
        ✔ clampScalar @done(24-03-26 11:40)
        ✔ clampLength @started(24-03-26 11:41) @done(24-03-26 12:09) @lasted(28m9s)
        ✔ vfloor @started(24-03-26 12:09) @done(24-03-26 12:21) @lasted(12m54s)
        ✔ vceil @started(24-03-26 12:09) @done(24-03-26 12:23) @lasted(14m32s)
        ✔ vround @started(24-03-26 12:09) @done(24-03-26 12:24) @lasted(15m46s)
        ✔ vtruncate @started(24-03-26 12:24) @done(24-03-26 12:39) @lasted(15m42s)
        ✔ negate @done(24-03-22 20:48)
        ✔ dot product two vectors @started(24-03-21 21:39) @done(24-03-22 20:08) @lasted(22h29m48s)
            ✔ dot product two vectors with overloaded 'dot' operator @done(24-03-22 20:08)
        ✔ cross product of two vectors @done(24-03-22 20:08)
            ✔  product of two vectors with overloaded 'x' operator @done(24-03-22 20:08)
        ✔ lengthSq @done(24-03-22 20:08)
        ✔ length @done(24-03-22 20:09)
        ✔ manhattanLength @done(24-03-22 20:09)
        ✔ normalize @done(24-03-22 21:36)
        ✔ angle @done(24-03-22 22:37)
        ✔ angleNU - angle north up @done(24-03-22 22:37)
        ✔ angleTo @done(24-03-22 23:19)
        ✔ distanceTo @done(24-03-26 15:40)
        ✔ distanceToSquared @started(24-03-26 15:27) @done(24-03-26 15:40) @lasted(13m24s)
        ✔ manhattanDistanceTo @started(24-03-26 15:40) @done(24-03-26 15:44) @lasted(4m39s)
        ✔ setLength @started(24-03-26 15:44) @done(24-03-26 21:09) @lasted(5h25m8s)
        ✔ lerp @started(24-03-26 15:44) @done(24-03-26 21:21) @lasted(5h37m43s)
        ✔ lerpVectors @started(24-03-26 15:44) @done(24-03-26 21:31) @lasted(5h47m22s)
        ✔ equals @started(24-03-26 15:44) @done(24-03-26 21:40) @lasted(5h56m29s)
            overload '==' and '!=':
            ✔ checks if two vectors are equal using '==' or '!=' operator @started(24-03-26 15:44) @done(24-03-26 21:46) @lasted(6h2m41s)
        ✘ fromArray @started(24-03-26 15:44) @cancelled(24-03-26 21:46) @wasted(6h2m50s)
        ✘ toArray @started(24-03-26 15:45) @cancelled(24-03-26 21:47) @wasted(6h2m2s)
        ✔ rotateAround @started(24-03-26 15:45) @done(24-03-26 22:08) @lasted(6h23m3s)
        ✔ random @started(24-03-26 15:45) @done(24-03-26 22:08) @lasted(6h23m4s)
