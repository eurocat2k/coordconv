.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title ".::Vector2D 3"
.TH .::Vector2D 3 2024-03-26 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Vector2D
.SH SYNOPSYS
.IX Header "SYNOPSYS"
use Vector2D;
.PP
my \f(CW$vector\fR = Vector2D\->\fBnew()\fR;
.PP
my \f(CW$vector\fR = Vector2D\->new(1, 1);
.SS Constructor
.IX Subsection "Constructor"
.IP "new(X: 0, y: 0)" 4
.IX Item "new(X: 0, y: 0)"
The constructor expects zero, one or max two scalar values.
.SS Methods
.IX Subsection "Methods"
.ie n .IP "\- set( @args )" 4
.el .IP "\- set( \f(CW@args\fR )" 4
.IX Item "- set( @args )"
This method sets the vector elements. Depending on the type of caller \- Class or instance \-
the method will parse first three, or all arguments.
.Sp
If caller is a Class, the \f(CW$v1\fR refers to the instance which will be
altered with the remaining arguments \- if they defined.
.Sp
If caller is an instance, \f(CW$1\fR and \f(CW$opt\fR will be used to set vector elements.
.ie n .IP "\- add( @args )" 4
.el .IP "\- add( \f(CW@args\fR )" 4
.IX Item "- add( @args )"
See \f(CW\*(C`subtract\*(C'\fR above.
.IP sadd(@args) 4
.IX Item "sadd(@args)"
This method adds a scalar value to the vector's each elements.
.IP ssub(@args) 4
.IX Item "ssub(@args)"
This method decrements the vector's each elements by a scalar value.
.IP "\- subtract(@args)" 4
.IX Item "- subtract(@args)"
Expects maximum 3 arguments. If all arguments set \- the argument count equals 3, the first
two will contain the references to the Vector2D instances.
.Sp
If only two arguments defined \- the static method called \- the Vector2D class calls
the subtract method with two references: first vector will be subtracted by second vector.
.Sp
The result going to be stored into a new vector in both cases;
.IP "\- print(@args)" 4
.IX Item "- print(@args)"
If the caller is not an instance but Vector2D class, the last two
arguments processed \- \f(CW$opt\fR refers to the label text argument, this is
optional. The \f(CW$v1\fR argument refers to an instance of Vector2D class.
.Sp
If the caller is an instance, only the first two arguments will be used.
.Sp
The first one is the instance itself, the second \- optional \- argument
is the label text.
.Sp
Returns the printed instance in both cases.
.IP "\- zero([$arg])" 4
.IX Item "- zero([$arg])"
This method initializes the vector with 0s.
.Sp
If caller is a Class, then the second argument will be zeroed, otherwise the first one
which is the instance itself.
.IP "\- clone(@args)" 4
.IX Item "- clone(@args)"
This method creates an exact copy of the argument ( \fIwhich must be an instance of Vector2D class\fR ) \- in that case, when
the caller is the Class \-, or itself.
.Sp
Returns a new instance vector.
.IP "\- copy(@args)" 4
.IX Item "- copy(@args)"
This method is an alias of clone. See details clone method above.
.IP "\- dot(@args)" 4
.IX Item "- dot(@args)"
This method calculates the dot product of the two vectors.
.IP "\- cross(@args)" 4
.IX Item "- cross(@args)"
This method returns the cross product of two Vector2D
.IP "\- mul(@args)" 4
.IX Item "- mul(@args)"
This method multiplies two vectors \- common elements miltiplied \- quite the same as dot product, but the result is not summed.
.IP "\- div(@args)" 4
.IX Item "- div(@args)"
This method multiplies two vectors \- common elements miltiplied \- quite the same as dot product, but the result is not summed.
.IP "\- length([$arg])" 4
.IX Item "- length([$arg])"
This method gives back the length of the vector \- the distance of the vector end from the origo.
.IP "\- lengthSq([$arg])" 4
.IX Item "- lengthSq([$arg])"
This method gives back the length squared of the vector.
.IP "\- manhattanLength([$arg])" 4
.IX Item "- manhattanLength([$arg])"
This method calculates the vector's Manhattan length.
.IP "\- negate([$arg])" 4
.IX Item "- negate([$arg])"
This method negates the vector.
.IP "\- sdiv(@args)" 4
.IX Item "- sdiv(@args)"
THis method returns the vector which elements were divided by scalar
.IP "\- smul(@args)" 4
.IX Item "- smul(@args)"
THis method returns the vector which elements were multiplied by scalar
.IP "\- normalize([$arg])" 4
.IX Item "- normalize([$arg])"
This method calculates the normalized vector \- unit vector \- from the original one.
.IP "\- angle([$arg])" 4
.IX Item "- angle([$arg])"
This method calculates direction of the vector. X \- heading right \- represents North.
.IP "\- angleNU([$arg])" 4
.IX Item "- angleNU([$arg])"
This method calculates direction of the vector. Y \- heading up \- represents North.
.IP "\- angleTo(@args)" 4
.IX Item "- angleTo(@args)"
This method calculates the direction between two vectors in 2D.
.IP "\- angleToNU(@args) \fIdeprecated\fR" 4
.IX Item "- angleToNU(@args) deprecated"
This method calculates the direction between two vectors in 2D \- Y axis North up.
.SS "\fBMisc methods\fP"
.IX Subsection "Misc methods"
These methods extends the capabilities of the Vector2D package.
.IP "\- debug(_\|_LINE_\|_,_\|_FILE_\|_[,message])" 4
.IX Item "- debug(__LINE__,__FILE__[,message])"
prints out debug information.
.IP "\- normalize_angle_degrees($angle_in_degrees)" 4
.IX Item "- normalize_angle_degrees($angle_in_degrees)"
returns the angle in range 0 .. 360 degrees
.IP "\- normalize_angle_radians($angle_in_radians)" 4
.IX Item "- normalize_angle_radians($angle_in_radians)"
returns the angle in range 0 .. 2 * PI radians
.IP "clamp(min, max, value)" 4
.IX Item "clamp(min, max, value)"
This method returns clamp value \- in range 'min' .. 'max' \-, or
in case when the value is out of the range, then returns 'min' if value is below
the minimum, or returns 'max' if the value is beyond the maximum.
.SH FILES
.IX Header "FILES"
\&\fIVector2D.pm\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBVector3D\fR\|(3), \fBMatrix2D\fR\|(3), \fBMatrix3D\fR\|(3), \fBMatrix4D\fR\|(3)
.SH AUTHOR
.IX Header "AUTHOR"
G.Zelenak
.PP
1;
